[gd_resource type="VisualShader" load_steps=26 format=3 uid="uid://s5bajp7c2xv5"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_nm4uh"]
parameter_name = "DeepWater"
default_value_enabled = true
default_value = Color(0, 0.883333, 1, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_n6jdt"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_5fulg"]
parameter_name = "DepthTexture"
texture_filter = 4
texture_source = 2

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_ukvlk"]
size = Vector2(480, 340)
expression = "vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
float v1 = texture(sim, UV - duv.xz).y;
float v2 = texture(sim, UV + duv.xz).y;
float v3 = texture(sim, UV - duv.zy).y;
float v4 = texture(sim, UV + duv.zy).y;

normal = normalize(vec3(v1 - v2, v3 - v4, 0.3));"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_uubn3"]
parameter_name = "refraction_strength"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_nk8ph"]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3cjj2"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ij0ey"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_4fxeu"]
source = 1

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_m4vvh"]
default_input_values = [0, Vector3(0, 0, 0), 1, Vector3(1, 1, 1), 2, Vector3(0.5, 0.5, 0.5)]
op_type = 3

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_w4sbh"]
constant = 0.8

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_2ocrc"]
parameter_name = "SimulationTexture"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pby5a"]
size = Vector2(540, 320)
expression = "float d = texture(depth_texture, SCREEN_UV).r;
d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
d = d + VERTEX.z;
depth = exp(-d * murkiness);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_r2pf2"]
parameter_name = "murkiness"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_pnja7"]
function = 31

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_wamqu"]
parameter_name = "ShallowWater"
default_value_enabled = true
default_value = Color(0.0333333, 0, 1, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_fg7ie"]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_4ooqn"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_f5lcr"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_e7dym"]
expanded_output_ports = [0]
source = 5

[sub_resource type="VisualShaderNodeParameterRef" id="VisualShaderNodeParameterRef_0g6sy"]
parameter_name = "SimulationTexture"
param_type = 9

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_kj5ag"]
parameter_name = "Amplitude"
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_p4i54"]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_g6nhb"]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_8qn11"]
input_name = "normal"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D SimulationTexture;
uniform float Amplitude = 0.10000000149012;
uniform vec4 ShallowWater : source_color = vec4(0.033333, 0.000000, 1.000000, 1.000000);
uniform vec4 DeepWater : source_color = vec4(0.000000, 0.883333, 1.000000, 1.000000);
uniform float murkiness = 0.5;
uniform sampler2D DepthTexture : filter_linear_mipmap, hint_depth_texture;
uniform float refraction_strength = 1;
uniform sampler2D screen_tex_frg_18 : hint_screen_texture;



void vertex() {
// Input:11
	vec3 n_out11p0 = VERTEX;


// Input:9
	vec3 n_out9p0 = NORMAL;


// Input:2
	vec2 n_out2p0 = UV;


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(SimulationTexture, n_out2p0);
	float n_out4p1 = n_out4p0.r;


// FloatParameter:6
	float n_out6p0 = Amplitude;


// FloatOp:7
	float n_out7p0 = n_out4p1 * n_out6p0;


// VectorOp:8
	vec3 n_out8p0 = n_out9p0 * vec3(n_out7p0);


// VectorOp:10
	vec3 n_out10p0 = n_out11p0 + n_out8p0;


// Output:0
	VERTEX = n_out10p0;


}

void fragment() {
// ColorParameter:9
	vec4 n_out9p0 = ShallowWater;


// ColorParameter:10
	vec4 n_out10p0 = DeepWater;


// FloatParameter:7
	float n_out7p0 = murkiness;


	float n_out6p0;
// Expression:6
	n_out6p0 = 0.0;
	{
		float d = texture(DepthTexture, SCREEN_UV).r;
		d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
		d = d + VERTEX.z;
		n_out6p0 = exp(-d * n_out7p0);
	}


// Mix:11
	vec3 n_out11p0 = mix(vec3(n_out9p0.xyz), vec3(n_out10p0.xyz), vec3(n_out6p0));


// Input:16
	vec2 n_out16p0 = SCREEN_UV;


// FloatParameter:14
	float n_out14p0 = refraction_strength;


	vec3 n_out13p0;
// Expression:13
	n_out13p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
		float v1 = texture(SimulationTexture, UV - duv.xz).y;
		float v2 = texture(SimulationTexture, UV + duv.xz).y;
		float v3 = texture(SimulationTexture, UV - duv.zy).y;
		float v4 = texture(SimulationTexture, UV + duv.zy).y;
		
		n_out13p0 = normalize(vec3(v1 - v2, v3 - v4, 0.3));
	}


// VectorOp:15
	vec3 n_out15p0 = vec3(n_out14p0) * n_out13p0;


// VectorOp:17
	vec3 n_out17p0 = vec3(n_out16p0, 0.0) + n_out15p0;


	vec4 n_out18p0;
// Texture2D:18
	n_out18p0 = texture(screen_tex_frg_18, vec2(n_out17p0.xy));


// FloatConstant:20
	float n_out20p0 = 0.800000;


// Mix:19
	vec3 n_out19p0 = mix(n_out11p0, vec3(n_out18p0.xyz), vec3(n_out20p0));


// FloatFunc:8
	float n_out8p0 = 1.0 - n_out6p0;


// Output:0
	ALBEDO = n_out19p0;
	ALPHA = n_out8p0;
	NORMAL = n_out13p0;


}
"
graph_offset = Vector2(489.87, 373.391)
nodes/vertex/0/position = Vector2(1420, 120)
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_f5lcr")
nodes/vertex/2/position = Vector2(-240, 140)
nodes/vertex/4/node = SubResource("VisualShaderNodeTexture_e7dym")
nodes/vertex/4/position = Vector2(220, 240)
nodes/vertex/5/node = SubResource("VisualShaderNodeParameterRef_0g6sy")
nodes/vertex/5/position = Vector2(-180, 400)
nodes/vertex/6/node = SubResource("VisualShaderNodeFloatParameter_kj5ag")
nodes/vertex/6/position = Vector2(200, 480)
nodes/vertex/7/node = SubResource("VisualShaderNodeFloatOp_p4i54")
nodes/vertex/7/position = Vector2(527.512, 328.45)
nodes/vertex/8/node = SubResource("VisualShaderNodeVectorOp_g6nhb")
nodes/vertex/8/position = Vector2(760, 200)
nodes/vertex/9/node = SubResource("VisualShaderNodeInput_8qn11")
nodes/vertex/9/position = Vector2(400, 160)
nodes/vertex/10/node = SubResource("VisualShaderNodeVectorOp_fg7ie")
nodes/vertex/10/position = Vector2(1060, 100)
nodes/vertex/11/node = SubResource("VisualShaderNodeInput_4ooqn")
nodes/vertex/11/position = Vector2(740, 80)
nodes/vertex/connections = PackedInt32Array(2, 0, 4, 0, 5, 0, 4, 2, 4, 1, 7, 0, 6, 0, 7, 1, 7, 0, 8, 1, 9, 0, 8, 0, 8, 0, 10, 1, 11, 0, 10, 0, 10, 0, 0, 0)
nodes/fragment/0/position = Vector2(1740, 300)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture2DParameter_2ocrc")
nodes/fragment/3/position = Vector2(-320, 260)
nodes/fragment/6/node = SubResource("VisualShaderNodeExpression_pby5a")
nodes/fragment/6/position = Vector2(-100, 1120)
nodes/fragment/6/size = Vector2(540, 320)
nodes/fragment/6/input_ports = "0,0,murkiness;1,8,depth_texture;"
nodes/fragment/6/output_ports = "0,0,depth;"
nodes/fragment/6/expression = "float d = texture(depth_texture, SCREEN_UV).r;
d = PROJECTION_MATRIX[3][2] / (d + PROJECTION_MATRIX[2][2]);
d = d + VERTEX.z;
depth = exp(-d * murkiness);"
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatParameter_r2pf2")
nodes/fragment/7/position = Vector2(-440, 1080)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatFunc_pnja7")
nodes/fragment/8/position = Vector2(580, 900)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorParameter_wamqu")
nodes/fragment/9/position = Vector2(-40, 660)
nodes/fragment/10/node = SubResource("VisualShaderNodeColorParameter_nm4uh")
nodes/fragment/10/position = Vector2(-20, 860)
nodes/fragment/11/node = SubResource("VisualShaderNodeMix_n6jdt")
nodes/fragment/11/position = Vector2(340, 740)
nodes/fragment/12/node = SubResource("VisualShaderNodeTexture2DParameter_5fulg")
nodes/fragment/12/position = Vector2(-480, 1300)
nodes/fragment/13/node = SubResource("VisualShaderNodeExpression_ukvlk")
nodes/fragment/13/position = Vector2(120, 220)
nodes/fragment/13/size = Vector2(480, 340)
nodes/fragment/13/input_ports = "0,8,sim;"
nodes/fragment/13/output_ports = "0,4,normal;"
nodes/fragment/13/expression = "vec3 duv = vec3(4.0 / 512.0, 4.0 / 512.0, 0);
float v1 = texture(sim, UV - duv.xz).y;
float v2 = texture(sim, UV + duv.xz).y;
float v3 = texture(sim, UV - duv.zy).y;
float v4 = texture(sim, UV + duv.zy).y;

normal = normalize(vec3(v1 - v2, v3 - v4, 0.3));"
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_uubn3")
nodes/fragment/14/position = Vector2(480, 0)
nodes/fragment/15/node = SubResource("VisualShaderNodeVectorOp_nk8ph")
nodes/fragment/15/position = Vector2(860, 120)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_3cjj2")
nodes/fragment/16/position = Vector2(780, -40)
nodes/fragment/17/node = SubResource("VisualShaderNodeVectorOp_ij0ey")
nodes/fragment/17/position = Vector2(1140, 100)
nodes/fragment/18/node = SubResource("VisualShaderNodeTexture_4fxeu")
nodes/fragment/18/position = Vector2(1300, 140)
nodes/fragment/19/node = SubResource("VisualShaderNodeMix_m4vvh")
nodes/fragment/19/position = Vector2(1540, 200)
nodes/fragment/20/node = SubResource("VisualShaderNodeFloatConstant_w4sbh")
nodes/fragment/20/position = Vector2(1340, 320)
nodes/fragment/connections = PackedInt32Array(7, 0, 6, 0, 6, 0, 8, 0, 9, 0, 11, 0, 10, 0, 11, 1, 6, 0, 11, 2, 12, 0, 6, 1, 3, 0, 13, 0, 13, 0, 0, 8, 14, 0, 15, 0, 13, 0, 15, 1, 16, 0, 17, 0, 15, 0, 17, 1, 17, 0, 18, 0, 11, 0, 19, 0, 20, 0, 19, 2, 18, 0, 19, 1, 19, 0, 0, 0, 8, 0, 0, 1)
